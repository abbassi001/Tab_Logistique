<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="{% block meta_description %}TAB Logistique - Votre solution complÃ¨te pour la gestion et le suivi de vos expÃ©ditions{% endblock %}">
    <meta name="keywords" content="{% block meta_keywords %}logistique, transport, colis, suivi, expÃ©dition, TAB{% endblock %}">
    <meta name="author" content="TAB Logistique">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="{{ app.request.uri }}">
    <meta property="og:title" content="{% block og_title %}{{ block('title') }}{% endblock %}">
    <meta property="og:description" content="{{ block('meta_description') }}">
    <meta property="og:image" content="{{ asset('images/og-image.jpg') }}">

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="{{ app.request.uri }}">
    <meta property="twitter:title" content="{{ block('og_title') }}">
    <meta property="twitter:description" content="{{ block('meta_description') }}">
    <meta property="twitter:image" content="{{ asset('images/og-image.jpg') }}">

    <title>{% block title %}TAB Logistique{% endblock %}</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>ðŸ“¦</text></svg>">
    <link rel="apple-touch-icon" sizes="180x180" href="{{ asset('images/apple-touch-icon.png') }}">
    <link rel="icon" type="image/png" sizes="32x32" href="{{ asset('images/favicon-32x32.png') }}">
    <link rel="icon" type="image/png" sizes="16x16" href="{{ asset('images/favicon-16x16.png') }}">
    <link rel="manifest" href="{{ asset('site.webmanifest') }}">
    
    <!-- Preconnect to external domains for performance -->
    <link rel="preconnect" href="https://cdn.jsdelivr.net">
    <link rel="preconnect" href="https://cdnjs.cloudflare.com">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- CSS Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Base Application Styles -->
    <link rel="stylesheet" href="{{ asset('css/main.css') }}">
    <link rel="stylesheet" href="{{ asset('css/animations.css') }}">
    <link rel="stylesheet" href="{{ asset('css/utilities.css') }}">
    
    <!-- Print Styles -->
    <link rel="stylesheet" href="{{ asset('css/print.css') }}" media="print">
    
    <!-- Module-specific CSS (conditionally loaded) -->
    {% if app.request.attributes.get('_route') starts with 'app_admin_' %}
        <link rel="stylesheet" href="{{ asset('css/modules/admin.css') }}">
        <link rel="stylesheet" href="{{ asset('css/modules/dashboard.css') }}">
    {% endif %}
    
    {% if app.request.attributes.get('_route') starts with 'app_colis_' %}
        <link rel="stylesheet" href="{{ asset('css/modules/colis.css') }}">
    {% endif %}
    
    {% if app.request.attributes.get('_route') starts with 'app_colis_wizard_' %}
        <link rel="stylesheet" href="{{ asset('css/modules/wizard.css') }}">
    {% endif %}
    
    <!-- Page-specific stylesheets -->
    {% block stylesheets %}{% endblock %}
    
    <!-- Critical CSS for above-the-fold content -->
    <style>
        /* Critical CSS */
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f8f9fa;
        }
        
        .app-container {
            display: flex;
            min-height: 100vh;
            flex-direction: column;
        }
        
        .main-wrapper {
            display: flex;
            flex: 1;
        }
        
        .content-wrapper {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow-x: hidden;
        }
        
        .main-content {
            flex: 1;
            padding: 0;
            background-color: #f8f9fa;
        }
        
        /* Loading overlay */
        .page-loader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            backdrop-filter: blur(5px);
        }
        
        .page-loader.hidden {
            display: none;
        }
        
        .loader-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #e3e3e3;
            border-top: 4px solid #0d6efd;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Responsive utilities */
        @media (max-width: 991.98px) {
            .main-wrapper {
                flex-direction: column;
            }
            
            .sidebar {
                order: -1;
            }
        }
        
        /* Focus management for accessibility */
        .skip-to-content {
            position: absolute;
            top: -40px;
            left: 6px;
            background: #0d6efd;
            color: white;
            padding: 8px;
            text-decoration: none;
            border-radius: 4px;
            transition: top 0.3s;
        }
        
        .skip-to-content:focus {
            top: 6px;
        }
        
        /* High contrast mode support */
        @media (prefers-contrast: high) {
            body {
                background-color: #fff;
                color: #000;
            }
        }
        
        /* Reduced motion support */
        @media (prefers-reduced-motion: reduce) {
            *,
            *::before,
            *::after {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }
    </style>
</head>

<body class="{% block body_class %}{% endblock %}">
    <!-- Page Loader -->
    <div class="page-loader" id="pageLoader">
        <div class="loader-spinner"></div>
    </div>
    
    <!-- Skip to content link for accessibility -->
    <a href="#main-content" class="skip-to-content">Aller au contenu principal</a>
    
    <!-- Application Container -->
    <div class="app-container">
        <!-- Top Navigation Bar -->
        {% if not (block('hide_navbar') is defined and block('hide_navbar')) %}
            {{ include('components/navbar.html.twig') }}
        {% endif %}
        
        <!-- Main Application Wrapper -->
        <div class="main-wrapper">
            <!-- Sidebar Navigation -->
            {% if is_granted('ROLE_USER') and not (block('hide_sidebar') is defined and block('hide_sidebar')) %}
                {{ include('components/sidebar.html.twig') }}
            {% endif %}
            
            <!-- Content Wrapper -->
            <div class="content-wrapper">
                <!-- Main Content Area -->
                <main class="main-content" id="main-content" role="main">
                    <!-- Flash Messages -->
                    {% for label, messages in app.flashes %}
                        <div class="alert-container">
                            {% for message in messages %}
                                <div class="alert alert-{{ label == 'error' ? 'danger' : label }} alert-dismissible fade show shadow-sm" role="alert">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-{{ label == 'success' ? 'check-circle' : (label == 'error' or label == 'danger') ? 'exclamation-circle' : label == 'warning' ? 'exclamation-triangle' : 'info-circle' }} me-2"></i>
                                        <div class="flex-grow-1">{{ message }}</div>
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% endfor %}
                    
                    <!-- Breadcrumb Navigation -->
                    {% if block('breadcrumb') is defined %}
                        <nav aria-label="breadcrumb" class="breadcrumb-nav">
                            <div class="container-fluid">
                                <ol class="breadcrumb bg-white rounded shadow-sm p-3 mb-4">
                                    {% block breadcrumb %}{% endblock %}
                                </ol>
                            </div>
                        </nav>
                    {% endif %}
                    
                    <!-- Page Content -->
                    <div class="page-content">
                        {% block body %}{% endblock %}
                    </div>
                </main>
            </div>
        </div>
        
        <!-- Footer -->
        {% if not (block('hide_footer') is defined and block('hide_footer')) %}
            {{ include('components/footer.html.twig') }}
        {% endif %}
    </div>
    
    <!-- Global Modals -->
    {% block global_modals %}
        <!-- Confirmation Modal -->
        <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmationModalLabel">
                            <i class="fas fa-question-circle text-warning me-2"></i>Confirmation
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" id="confirmationModalBody">
                        ÃŠtes-vous sÃ»r de vouloir effectuer cette action ?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button type="button" class="btn btn-primary" id="confirmationModalConfirm">Confirmer</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Loading Modal -->
        <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
            <div class="modal-dialog modal-sm">
                <div class="modal-content">
                    <div class="modal-body text-center py-4">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                        <div id="loadingModalMessage">Traitement en cours...</div>
                    </div>
                </div>
            </div>
        </div>
    {% endblock %}
    <!-- JavaScript Dependencies -->
    
    <!-- Remplacez tout le JavaScript Ã  la fin de base.html.twig par ceci : -->

<script>
// Application Configuration
window.APP_CONFIG = {
    baseUrl: '{{ app.request.schemeAndHttpHost }}',
    locale: '{{ app.request.locale }}',
    csrfToken: '{{ csrf_token('global') }}',
    user: {
        isAuthenticated: {{ app.user ? 'true' : 'false' }},
        roles: {{ app.user ? app.user.roles|json_encode : '[]' }},
        email: '{{ app.user ? app.user.email : '' }}'
    },
    routes: {
        logout: '{{ path('app_logout') }}',
        home: '{{ path('app_home') }}'
    }
};

// CACHER LE LOADER IMMÃ‰DIATEMENT - SOLUTION 1
(function() {
    const pageLoader = document.getElementById('pageLoader');
    if (pageLoader) {
        pageLoader.style.display = 'none';
    }
})();

// CACHER LE LOADER AU CHARGEMENT - SOLUTION 2 (BACKUP)
window.addEventListener('load', function() {
    const pageLoader = document.getElementById('pageLoader');
    if (pageLoader) {
        pageLoader.style.display = 'none';
        pageLoader.classList.add('hidden');
    }
});

// CACHER LE LOADER QUAND LE DOM EST PRÃŠT - SOLUTION 3 (BACKUP)
document.addEventListener('DOMContentLoaded', function() {
    // PREMIÃˆRE PRIORITÃ‰: Cacher le loader
    const pageLoader = document.getElementById('pageLoader');
    if (pageLoader) {
        pageLoader.style.display = 'none';
        pageLoader.classList.add('hidden');
    }
    
    // Initialize tooltips
    try {
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    } catch(e) {
        console.log('Tooltips initialization failed:', e);
    }
    
    // Initialize popovers
    try {
        const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        popoverTriggerList.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl);
        });
    } catch(e) {
        console.log('Popovers initialization failed:', e);
    }
    
    // Auto-dismiss alerts
    try {
        const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');
        alerts.forEach(alert => {
            if (!alert.querySelector('.btn-close')) return;
            
            setTimeout(() => {
                if (typeof bootstrap !== 'undefined' && bootstrap.Alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 5000);
        });
    } catch(e) {
        console.log('Alerts initialization failed:', e);
    }
    
    // Initialize other components
    try {
        initializeSidebar();
        initializeFormEnhancements();
        initializeConfirmationHandlers();
        initializeGlobalSearch();
        initializeKeyboardShortcuts();
    } catch(e) {
        console.log('Other components initialization failed:', e);
    }
});

// Sidebar Management
function initializeSidebar() {
    const sidebar = document.getElementById('sidebar');
    const sidebarToggle = document.getElementById('sidebarToggle');
    const sidebarClose = document.getElementById('sidebarClose');
    const sidebarOverlay = document.getElementById('sidebarOverlay');
    
    if (!sidebar) return;
    
    function showSidebar() {
        sidebar.classList.add('show');
        if (sidebarOverlay) sidebarOverlay.classList.add('show');
        document.body.style.overflow = 'hidden';
    }
    
    function hideSidebar() {
        sidebar.classList.remove('show');
        if (sidebarOverlay) sidebarOverlay.classList.remove('show');
        document.body.style.overflow = '';
    }
    
    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', showSidebar);
    }
    
    if (sidebarClose) {
        sidebarClose.addEventListener('click', hideSidebar);
    }
    
    if (sidebarOverlay) {
        sidebarOverlay.addEventListener('click', hideSidebar);
    }
    
    // Close sidebar on escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && sidebar.classList.contains('show')) {
            hideSidebar();
        }
    });
}

// Form Enhancements
function initializeFormEnhancements() {
    // Add loading states to forms
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', function() {
            const submitBtn = form.querySelector('button[type="submit"]');
            if (submitBtn && !submitBtn.disabled) {
                const originalText = submitBtn.textContent;
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Traitement...';
                
                // Re-enable button after 30 seconds as fallback
                setTimeout(() => {
                    submitBtn.disabled = false;
                    submitBtn.textContent = originalText;
                }, 30000);
            }
        });
    });
    
    // Form validation enhancement
    const forms_validation = document.querySelectorAll('.needs-validation');
    forms_validation.forEach(form => {
        form.addEventListener('submit', function(event) {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
                
                // Focus on first invalid field
                const firstInvalid = form.querySelector(':invalid');
                if (firstInvalid) {
                    firstInvalid.focus();
                }
            }
            form.classList.add('was-validated');
        });
    });
}

// Confirmation Handlers
function initializeConfirmationHandlers() {
    const confirmationModal = document.getElementById('confirmationModal');
    if (!confirmationModal) return;
    
    let modal;
    try {
        modal = new bootstrap.Modal(confirmationModal);
    } catch(e) {
        console.log('Modal initialization failed:', e);
        return;
    }
    
    const confirmBtn = document.getElementById('confirmationModalConfirm');
    const modalBody = document.getElementById('confirmationModalBody');
    
    document.addEventListener('click', function(e) {
        const target = e.target.closest('[data-confirm]');
        if (!target) return;
        
        e.preventDefault();
        
        const message = target.dataset.confirm || 'ÃŠtes-vous sÃ»r de vouloir effectuer cette action ?';
        const action = target.href || target.dataset.action;
        
        if (modalBody) modalBody.textContent = message;
        
        if (confirmBtn) {
            confirmBtn.onclick = function() {
                if (action) {
                    if (target.tagName === 'FORM' || target.closest('form')) {
                        const form = target.tagName === 'FORM' ? target : target.closest('form');
                        form.submit();
                    } else {
                        window.location.href = action;
                    }
                }
                modal.hide();
            };
        }
        
        modal.show();
    });
}

// Global Search
function initializeGlobalSearch() {
    const searchInputs = document.querySelectorAll('.search-input');
    searchInputs.forEach(input => {
        let searchTimeout;
        
        input.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            const query = this.value.trim();
            
            if (query.length < 2) return;
            
            searchTimeout = setTimeout(() => {
                console.log('Search query:', query);
            }, 300);
        });
    });
}

// Keyboard Shortcuts
function initializeKeyboardShortcuts() {
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + K for search
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            const searchInput = document.querySelector('.search-input');
            if (searchInput) {
                searchInput.focus();
            }
        }
        
        // Ctrl/Cmd + Shift + N for new item
        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'N') {
            e.preventDefault();
            const newButton = document.querySelector('[href*="new"], [href*="wizard"]');
            if (newButton) {
                window.location.href = newButton.href;
            }
        }
    });
}

// Utility Functions
window.AppUtils = {
    showLoading: function(message = 'Traitement en cours...') {
        const modal = document.getElementById('loadingModal');
        const messageEl = document.getElementById('loadingModalMessage');
        if (modal && messageEl && typeof bootstrap !== 'undefined') {
            messageEl.textContent = message;
            new bootstrap.Modal(modal).show();
        }
    },
    
    hideLoading: function() {
        const modal = document.getElementById('loadingModal');
        if (modal && typeof bootstrap !== 'undefined') {
            const bsModal = bootstrap.Modal.getInstance(modal);
            if (bsModal) bsModal.hide();
        }
    },
    
    showAlert: function(message, type = 'info') {
        const alertContainer = document.querySelector('.alert-container') || document.body;
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show shadow-sm`;
        alert.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                <div class="flex-grow-1">${message}</div>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        alertContainer.appendChild(alert);
        
        setTimeout(() => {
            if (typeof bootstrap !== 'undefined' && bootstrap.Alert) {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            }
        }, 5000);
    },
    
    formatCurrency: function(amount, currency = 'EUR') {
        return new Intl.NumberFormat('fr-FR', {
            style: 'currency',
            currency: currency
        }).format(amount);
    },
    
    formatDate: function(date, options = {}) {
        const defaults = {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        };
        return new Intl.DateTimeFormat('fr-FR', {...defaults, ...options}).format(new Date(date));
    }
};

// Error Handling
window.addEventListener('error', function(e) {
    console.error('Global error:', e.error);
});

window.addEventListener('unhandledrejection', function(e) {
    console.error('Unhandled promise rejection:', e.reason);
});

// FORCER LA DISPARITION DU LOADER - SOLUTION DE SECOURS
setTimeout(function() {
    const pageLoader = document.getElementById('pageLoader');
    if (pageLoader) {
        pageLoader.style.display = 'none';
        pageLoader.remove(); // Supprimer complÃ¨tement l'Ã©lÃ©ment
    }
}, 100); // AprÃ¨s 100ms maximum

</script><!-- Remplacez tout le JavaScript Ã  la fin de base.html.twig par ceci : -->

<script>
// Application Configuration
window.APP_CONFIG = {
    baseUrl: '{{ app.request.schemeAndHttpHost }}',
    locale: '{{ app.request.locale }}',
    csrfToken: '{{ csrf_token('global') }}',
    user: {
        isAuthenticated: {{ app.user ? 'true' : 'false' }},
        roles: {{ app.user ? app.user.roles|json_encode : '[]' }},
        email: '{{ app.user ? app.user.email : '' }}'
    },
    routes: {
        logout: '{{ path('app_logout') }}',
        home: '{{ path('app_home') }}'
    }
};

// CACHER LE LOADER IMMÃ‰DIATEMENT - SOLUTION 1
(function() {
    const pageLoader = document.getElementById('pageLoader');
    if (pageLoader) {
        pageLoader.style.display = 'none';
    }
})();

// CACHER LE LOADER AU CHARGEMENT - SOLUTION 2 (BACKUP)
window.addEventListener('load', function() {
    const pageLoader = document.getElementById('pageLoader');
    if (pageLoader) {
        pageLoader.style.display = 'none';
        pageLoader.classList.add('hidden');
    }
});

// CACHER LE LOADER QUAND LE DOM EST PRÃŠT - SOLUTION 3 (BACKUP)
document.addEventListener('DOMContentLoaded', function() {
    // PREMIÃˆRE PRIORITÃ‰: Cacher le loader
    const pageLoader = document.getElementById('pageLoader');
    if (pageLoader) {
        pageLoader.style.display = 'none';
        pageLoader.classList.add('hidden');
    }
    
    // Initialize tooltips
    try {
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    } catch(e) {
        console.log('Tooltips initialization failed:', e);
    }
    
    // Initialize popovers
    try {
        const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        popoverTriggerList.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl);
        });
    } catch(e) {
        console.log('Popovers initialization failed:', e);
    }
    
    // Auto-dismiss alerts
    try {
        const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');
        alerts.forEach(alert => {
            if (!alert.querySelector('.btn-close')) return;
            
            setTimeout(() => {
                if (typeof bootstrap !== 'undefined' && bootstrap.Alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 5000);
        });
    } catch(e) {
        console.log('Alerts initialization failed:', e);
    }
    
    // Initialize other components
    try {
        initializeSidebar();
        initializeFormEnhancements();
        initializeConfirmationHandlers();
        initializeGlobalSearch();
        initializeKeyboardShortcuts();
    } catch(e) {
        console.log('Other components initialization failed:', e);
    }
});

// Sidebar Management
function initializeSidebar() {
    const sidebar = document.getElementById('sidebar');
    const sidebarToggle = document.getElementById('sidebarToggle');
    const sidebarClose = document.getElementById('sidebarClose');
    const sidebarOverlay = document.getElementById('sidebarOverlay');
    
    if (!sidebar) return;
    
    function showSidebar() {
        sidebar.classList.add('show');
        if (sidebarOverlay) sidebarOverlay.classList.add('show');
        document.body.style.overflow = 'hidden';
    }
    
    function hideSidebar() {
        sidebar.classList.remove('show');
        if (sidebarOverlay) sidebarOverlay.classList.remove('show');
        document.body.style.overflow = '';
    }
    
    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', showSidebar);
    }
    
    if (sidebarClose) {
        sidebarClose.addEventListener('click', hideSidebar);
    }
    
    if (sidebarOverlay) {
        sidebarOverlay.addEventListener('click', hideSidebar);
    }
    
    // Close sidebar on escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && sidebar.classList.contains('show')) {
            hideSidebar();
        }
    });
}

// Form Enhancements
function initializeFormEnhancements() {
    // Add loading states to forms
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', function() {
            const submitBtn = form.querySelector('button[type="submit"]');
            if (submitBtn && !submitBtn.disabled) {
                const originalText = submitBtn.textContent;
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Traitement...';
                
                // Re-enable button after 30 seconds as fallback
                setTimeout(() => {
                    submitBtn.disabled = false;
                    submitBtn.textContent = originalText;
                }, 30000);
            }
        });
    });
    
    // Form validation enhancement
    const forms_validation = document.querySelectorAll('.needs-validation');
    forms_validation.forEach(form => {
        form.addEventListener('submit', function(event) {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
                
                // Focus on first invalid field
                const firstInvalid = form.querySelector(':invalid');
                if (firstInvalid) {
                    firstInvalid.focus();
                }
            }
            form.classList.add('was-validated');
        });
    });
}

// Confirmation Handlers
function initializeConfirmationHandlers() {
    const confirmationModal = document.getElementById('confirmationModal');
    if (!confirmationModal) return;
    
    let modal;
    try {
        modal = new bootstrap.Modal(confirmationModal);
    } catch(e) {
        console.log('Modal initialization failed:', e);
        return;
    }
    
    const confirmBtn = document.getElementById('confirmationModalConfirm');
    const modalBody = document.getElementById('confirmationModalBody');
    
    document.addEventListener('click', function(e) {
        const target = e.target.closest('[data-confirm]');
        if (!target) return;
        
        e.preventDefault();
        
        const message = target.dataset.confirm || 'ÃŠtes-vous sÃ»r de vouloir effectuer cette action ?';
        const action = target.href || target.dataset.action;
        
        if (modalBody) modalBody.textContent = message;
        
        if (confirmBtn) {
            confirmBtn.onclick = function() {
                if (action) {
                    if (target.tagName === 'FORM' || target.closest('form')) {
                        const form = target.tagName === 'FORM' ? target : target.closest('form');
                        form.submit();
                    } else {
                        window.location.href = action;
                    }
                }
                modal.hide();
            };
        }
        
        modal.show();
    });
}

// Global Search
function initializeGlobalSearch() {
    const searchInputs = document.querySelectorAll('.search-input');
    searchInputs.forEach(input => {
        let searchTimeout;
        
        input.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            const query = this.value.trim();
            
            if (query.length < 2) return;
            
            searchTimeout = setTimeout(() => {
                console.log('Search query:', query);
            }, 300);
        });
    });
}

// Keyboard Shortcuts
function initializeKeyboardShortcuts() {
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + K for search
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            const searchInput = document.querySelector('.search-input');
            if (searchInput) {
                searchInput.focus();
            }
        }
        
        // Ctrl/Cmd + Shift + N for new item
        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'N') {
            e.preventDefault();
            const newButton = document.querySelector('[href*="new"], [href*="wizard"]');
            if (newButton) {
                window.location.href = newButton.href;
            }
        }
    });
}

// Utility Functions
window.AppUtils = {
    showLoading: function(message = 'Traitement en cours...') {
        const modal = document.getElementById('loadingModal');
        const messageEl = document.getElementById('loadingModalMessage');
        if (modal && messageEl && typeof bootstrap !== 'undefined') {
            messageEl.textContent = message;
            new bootstrap.Modal(modal).show();
        }
    },
    
    hideLoading: function() {
        const modal = document.getElementById('loadingModal');
        if (modal && typeof bootstrap !== 'undefined') {
            const bsModal = bootstrap.Modal.getInstance(modal);
            if (bsModal) bsModal.hide();
        }
    },
    
    showAlert: function(message, type = 'info') {
        const alertContainer = document.querySelector('.alert-container') || document.body;
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show shadow-sm`;
        alert.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                <div class="flex-grow-1">${message}</div>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        alertContainer.appendChild(alert);
        
        setTimeout(() => {
            if (typeof bootstrap !== 'undefined' && bootstrap.Alert) {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            }
        }, 5000);
    },
    
    formatCurrency: function(amount, currency = 'EUR') {
        return new Intl.NumberFormat('fr-FR', {
            style: 'currency',
            currency: currency
        }).format(amount);
    },
    
    formatDate: function(date, options = {}) {
        const defaults = {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        };
        return new Intl.DateTimeFormat('fr-FR', {...defaults, ...options}).format(new Date(date));
    }
};

// Error Handling
window.addEventListener('error', function(e) {
    console.error('Global error:', e.error);
});

window.addEventListener('unhandledrejection', function(e) {
    console.error('Unhandled promise rejection:', e.reason);
});

// FORCER LA DISPARITION DU LOADER - SOLUTION DE SECOURS
setTimeout(function() {
    const pageLoader = document.getElementById('pageLoader');
    if (pageLoader) {
        pageLoader.style.display = 'none';
        pageLoader.remove(); // Supprimer complÃ¨tement l'Ã©lÃ©ment
    }
}, 100); // AprÃ¨s 100ms maximum

</script>

